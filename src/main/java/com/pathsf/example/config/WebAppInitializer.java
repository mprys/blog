package com.pathsf.example.config;import javax.servlet.Filter;import javax.servlet.ServletContext;import javax.servlet.ServletRegistration;import org.springframework.core.annotation.Order;import org.springframework.util.Assert;import org.springframework.util.ObjectUtils;import org.springframework.web.context.WebApplicationContext;import org.springframework.web.filter.CharacterEncodingFilter;import org.springframework.web.servlet.DispatcherServlet;import org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;@Order(2)public class WebAppInitializer extends AbstractAnnotationConfigDispatcherServletInitializer {		@Override	protected void registerDispatcherServlet(ServletContext servletContext) {		String servletName = this.getServletName();		Assert.hasLength(servletName,				"getServletName() may not return empty or null");		WebApplicationContext servletAppContext = this.createServletApplicationContext();		Assert.notNull(servletAppContext,				"createServletApplicationContext() did not return an application " +						"context for servlet [" + servletName + "]");		DispatcherServlet dispatcherServlet = new CustomDispatcherServlet(servletAppContext);		ServletRegistration.Dynamic registration =				servletContext.addServlet(servletName, dispatcherServlet);		registration.setLoadOnStartup(1);		registration.addMapping(getServletMappings());		registration.setAsyncSupported(isAsyncSupported());		Filter[] filters = getServletFilters();		if (!ObjectUtils.isEmpty(filters)) {			for (Filter filter : filters) {				registerServletFilter(servletContext, filter);			}		}		this.customizeRegistration(registration);	}	    @Override    protected String[] getServletMappings() {        return new String[]{"/"};    }    @Override    protected Class<?>[] getRootConfigClasses() {        return new Class<?>[] {ApplicationConfig.class, DataSourceConfig.class, JpaConfig.class, SecurityConfig.class};    }    @Override    protected Class<?>[] getServletConfigClasses() {        return new Class<?>[] {WebMvcConfig.class};    }    @Override    protected Filter[] getServletFilters() {        CharacterEncodingFilter characterEncodingFilter = new CharacterEncodingFilter();        characterEncodingFilter.setEncoding("UTF-8");        characterEncodingFilter.setForceEncoding(true);    	        return new Filter[] {characterEncodingFilter};    }    @Override    protected void customizeRegistration(ServletRegistration.Dynamic registration) {        registration.setInitParameter("defaultHtmlEscape", "true");        registration.setInitParameter("spring.profiles.active", "default");    }}